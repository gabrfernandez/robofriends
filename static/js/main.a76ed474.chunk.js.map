{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","children","style","overflowY","border","height","App","useState","setRobots","searchfield","setSearchfield","useEffect","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","event","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAeeA,G,YAbF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAExB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,WACpD,gCACI,6BAAKL,IACL,4BAAIC,YCWLK,EAjBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEf,OACI,8BACKA,EAAOC,KAAI,SAACC,EAAMC,GACf,OACA,cAAC,EAAD,CAEIR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCKVC,EAbG,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,aACjB,OACI,qBAAKT,UAAU,MAAf,SACI,uBACIA,UAAU,mCACVU,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCXI,EARA,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACb,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAQ,SAApE,SACKJ,KCoCEK,MAjCf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNhB,EADM,KACEiB,EADF,OAEuBD,mBAAS,IAFhC,mBAENE,EAFM,KAEOC,EAFP,KAIbC,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAQR,EAAUQ,QAC1B,IAEF,IAIMC,EAAgB1B,EAAO2B,QAAO,SAAAC,GAClC,OAAOA,EAAMnC,KAAKoC,cAAcC,SAASZ,EAAYW,kBAGvD,OACG7B,EAAO+B,OAGR,sBAAKnC,UAAU,SAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWS,aAdM,SAAC2B,GACpBb,EAAea,EAAMC,OAAOC,UAc1B,cAAC,EAAD,UACE,cAAC,EAAD,CAAUlC,OAAQ0B,SANtB,oBAAI9B,UAAU,KAAd,sBChBWuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a76ed474.chunk.js","sourcesContent":["import React from 'react'\n\nconst Card = ({name, email, id}) => {\n    \n    return (\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\"/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card\n","import React from 'react'\nimport Card from \"./Card\"\n\nconst CardList = ({robots}) => {\n    \n    return (\n        <div>\n            {robots.map((user, i) =>{\n                return (\n                <Card \n                    key={i}\n                    id={robots[i].id}\n                    name={robots[i].name}\n                    email={robots[i].email}\n                />\n            )})}\n        </div>\n    )\n}\n\nexport default CardList\n","import React from 'react'\n\nconst SearchBox = ({ searchChange}) => {\n    return (\n        <div className=\"pa2\">\n            <input \n                className=\"pa3 ba b--green bg-lightest-blue\" \n                type=\"search\" \n                placeholder=\"search robots\"\n                onChange={searchChange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox\n","import React from 'react'\n\nconst Scroll = ({children}) => {\n    return (\n        <div style={{overflowY: 'scroll', border:'1px solid black', height: '800px'}}>\n            {children}\n        </div>\n    )\n}\n\nexport default Scroll\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport \"tachyons\"\nimport CardList from \"./CardList\";\n//import {robots} from \"./robots\"\nimport SearchBox from \"./SearchBox\"\nimport Scroll from \"./Scroll\"\n\nfunction App() {\n  const [robots, setRobots]=useState([]);\n  const [searchfield, setSearchfield]=useState('')\n\n  useEffect(()=>{\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=>response.json())\n      .then(users=>{setRobots(users)});\n  },[])\n\n  const onSearchChange=(event)=>{\n    setSearchfield(event.target.value)\n  }\n  \n  const filteredRobots= robots.filter(robot=>{\n    return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n  })\n  \n  return (\n    !robots.length ?\n    <h1 className=\"tc\">Loading</h1> :\n    (\n    <div className=\"App tc\">\n      <h1 className=\"f2\">RoboFriends</h1>\n      <SearchBox searchChange={onSearchChange} />\n      <Scroll>\n        <CardList robots={filteredRobots}/>\n      </Scroll>\n    </div>\n    )\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}